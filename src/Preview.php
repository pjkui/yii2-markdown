<?php

namespace pjkui\markdown;

use yii\helpers\Html;

class Preview extends \yii\base\Widget
{

    /**
     * options of Markdown editor
     *
     * example
     * ```
     * [
     * 'id'=> 'markdown',
     * 'externals'=> [
     *   'echarts'=> 'window.echarts',
     *   'katex'=> 'window.katex',
     *   'MathJax'=> 'window.MathJax',
     * ],
     * 'isPreviewOnly'=> false,
     * 'engine'=> [
     *   'global'=> [
     *     'urlProcessor(url, srcType) {
     *       console.log(`url-processor`, url, srcType);
     *       return url;
     *     }',
     *  ],
     *   'syntax'=> [
     *     'table'=> [
     *       'enableChart'=> false,
     *       // chartEngine: Engine Class
     *     ],
     *     'fontEmphasis'=> [
     *       'allowWhitespace'=> true, // 是否允许首尾空格
     *     ],
     *     'mathBlock'=> [
     *       'engine'=> 'MathJax', // katex或MathJax
     *       'src'=> 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js', // 如果使用MathJax plugins，则需要使用该url通过script标签引入
     *     ],
     *     'inlineMath'=> [
     *       'engine'=> 'MathJax', // katex或MathJax
     *     ],
     *     'emoji'=> [
     *       'useUnicode'=> false,
     *       'customResourceURL'=> 'https://github.githubassets.com/images/icons/emoji/unicode/$[code].png?v8',
     *       'upperCase'=> true,
     *     ],
     *     // toc=> [
     *     //     tocStyle=> 'nested'
     *     // ]
     *     // 'header'=> [
     *     //   strict=> false
     *     // ]
     *   ],
     *   'customSyntax'=> [
     *     // SyntaxHookClass
     *     'CustomHook'=> [
     *       'syntaxClass'=> 'CustomHookA',
     *       'force'=> false,
     *       'after'=> 'br',
     *     ],
     *   ],
     * ],
     * 'toolbars'=> [
     *   'toolbar'=> [
     *     'bold',
     *     'italic',
     *     'strikethrough',
     *     '|',
     *     'color',
     *     'header',
     *     '|',
     *     'list',
     *     [
     *       'insert'=> ['image', 'audio', 'video', 'link', 'hr', 'br', 'code', 'formula', 'toc', 'table', 'pdf', 'word'],
     *     ],
     *     'graph',
     *     'togglePreview',
     *     'settings',
     *     'switchModel',
     *     'codeTheme',
     *     'export',
     *   ],
     *   'sidebar'=> ['mobilePreview', 'copy'],
     * ],
     * 'editor'=> [
     *   'defaultModel'=> 'edit&preview',
     * ],
     * 'previewer'=> [
     *   // 自定义markdown预览区域class
     *   // className=> 'markdown'
     * ],
     * 'keydown'=> [],
     * //extensions=> [],
     *]
     * ```
     *
     * @see https://github.com/Tencent/cherry-markdown/blob/HEAD/docs/extensions.md
     * @see https://github.com/Tencent/cherry-markdown/blob/main/docs/configuration.CN.md
     * @see https://github.com/Tencent/cherry-markdown/blob/main/docs/configuration.md
     */
    public $options = [];

    /**
     * @var string 渲染的内容
     */
    public $value = "";

    static public $INSTANCE_ID = 0;

    private $instanceId = 0;
    private $selector = "markdown-pre";

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->instanceId = ++Preview::$INSTANCE_ID;
        $this->selector = "markdown-pre".$this->instanceId;
        $this->options = [
            'id' => $this->selector,
            'externals' => [
                'echarts' => 'window.echarts',
                'katex' => 'window.katex',
                'MathJax' => 'window.MathJax',
            ],
            'isPreviewOnly' => false,
            'engine' => [
//                'global' => [
//                    'urlProcessor(url, srcType) {
//                     console.log(`url-processor`, url, srcType);
//                     return url;
//                   }',
//                ],
                'syntax' => [
                    'table' => [
                        'enableChart' => false,
                        // chartEngine: Engine Class
                    ],
                    'fontEmphasis' => [
                        'allowWhitespace' => true, // 是否允许首尾空格
                    ],
                    'mathBlock' => [
                        'engine' => 'MathJax', // katex或MathJax
                        'src' => 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js', // 如果使用MathJax plugins，则需要使用该url通过script标签引入
                    ],
                    'inlineMath' => [
                        'engine' => 'MathJax', // katex或MathJax
                    ],
                    'emoji' => [
                        'useUnicode' => false,
                        'customResourceURL' => 'https://github.githubassets.com/images/icons/emoji/unicode/$[code].png?v8',
                        'upperCase' => true,
                    ],
                    // toc=> [
                    //     tocStyle=> 'nested'
                    // ]
                    // 'header'=> [
                    //   strict=> false
                    // ]
                ],
                'customSyntax' => [
                    // SyntaxHookClass
//                    'CustomHook' => [
//                        'syntaxClass' => 'CustomHookA',
//                        'force' => false,
//                        'after' => 'br',
//                    ],
                ],
            ],
            'toolbars' => [
                'toolbar' => false,
                'sidebar' => ['mobilePreview', 'copy'],
            ],
            'editor' => [
                'defaultModel' => 'edit&preview',
                'height' => '80vh'
            ],
            'previewer' => [
                // 自定义markdown预览区域class
                // className=> 'markdown'
            ],
            'keydown' => [],
            //extensions=> [],
        ];
    }

    public function run()
    {
        $this->options['editor'] = ['defaultModel' => 'previewOnly'];

        EditorAsset::register($this->view);
        $js = '';
        $basicConfig = json_encode($this->options);
        $value = json_encode($this->value);
        $instance_id = $this->instanceId;
        $js .= <<<EOF
            var conf = ${basicConfig};
            var config = Object.assign({}, conf, { value: ${value} });
            var cherry = new Cherry(config);
            window.cherryPreview${instance_id} = cherry;
EOF;

        $this->view->registerJs($js);
        echo Html::tag('div', '',['id'=>$this->selector]);
    }

}